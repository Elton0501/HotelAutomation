@model Models.Menu
@{
    ViewBag.Title = "AddMenu";
    Layout = "~/Views/SuperAdmin/_SuperAdminLayout.cshtml";
    int RID = ViewBag.rid;
    var imageurl = "/Content/Images/DefaultImage.jpg";
    var errmsg = ViewBag.ErrMsg;
    var menuCat = ViewBag.menuCatItem;
}
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <label style="color:red;">@errmsg</label>
    <div class="form-horizontal">
        <h4>Menu - @RID</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <input name="RCode" value="@RID" hidden />
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MDesc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MDesc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MDesc, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MTCode, "Menu Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MTCode", (IEnumerable<SelectListItem>)ViewBag.tp, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MTCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.MCCode, "Menu Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("MCCode", (IEnumerable<SelectListItem>)ViewBag.menuCatItem, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MCCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MComment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MComment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MComment, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label>eg:upto 5</label>
            @Html.LabelFor(model => model.Rating, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Rating, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Rating, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label for="exampleFormControlInput1">Image</label>
            <br />
            <input name="img" id="Image" hidden />
            <input id="imageUpload" type="file" name="ImageOne" accept="image/*" class="form-control-file">
            <br />
            <img id="PlaceImage" alt="" src="@imageurl" style="width: 20%; margin-top: 5px;" />
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-outline-primary" />
            </div>
            <div class="col-md-offset-2 col-md-2 align-self-end">
                @Html.ActionLink("Back to List", "Menu", new { id = RID })
            </div>
        </div>
    </div>
}

<script>
    $("#imageUpload").change(function () {
        var checkimg = check();
        if (checkimg == true) {
        var element = this;
        var formData = new FormData();
        var totlaFiles = element.files.length;
        for (var i = 0; i < totlaFiles; i++) {
            var file = element.files[i];
            formData.append("Photo", file)
        }
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UploadMenuImage", "Image")',
            data: formData,
            dataType: 'json',
            contentType: false,
            processData: false
        })
            .done(function (response) {
                if (response.Success == true)
                {
                    $("#Image").val(response.ImageURL);
                    $("#PlaceImage").attr("src", response.ImageURL);
                }
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong!',
            })
        });
        }
        else {
            alert("Image size should be less then 80Kb");
        }
     });
    function check() {
        var imgpath = document.getElementById('imageUpload');
        if (!imgpath.value == "") {
            var img = imgpath.files[0].size;
            var imgsize = img / 1024;
            if (imgsize > 81) {
                return false;
            }
            else {
                return true;
            }
        }
    }
</script>
